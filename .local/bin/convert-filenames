#!/usr/bin/python3
import argparse
import os
import re
from enum import Enum

def main(target: str, virtual: bool, separator: str, capitalize: bool, capitalizeall: bool):
    previous_dir = os.getcwd()
    if not os.path.isdir(target) and not os.path.isfile(target):
        print("Unsupported target")
        exit(1)
    contents = sorted(n for n in (os.listdir(target)) if not n.startswith(".")) if os.path.isdir(target) else [target]

    if os.path.isdir(target):
        os.chdir(target)

    updates = {name: newname(name, separator, Capitalization.from_bools(capitalize, capitalizeall)) for name in contents}
    if virtual:
        print_updates(updates)
    else:
        apply_updates(updates)

def apply_updates(updates: dict[str, str]):
    for (old, new) in updates.items():
        if old != new:
            os.rename(old, new)

def print_updates(updates: dict[str, str]):
    for (old, new) in updates.items():
        print(f"{old} -> {new}")

class Capitalization(Enum):
    Lower = lambda s: s.lower()
    Title = lambda s: s.title()
    Upper = lambda s: s.upper()

    @classmethod
    def from_bools(cls, capitalize: bool, capitalizeall: bool):
        if capitalizeall:
            return cls.Upper
        elif capitalize:
            return cls.Title
        else:
            return cls.Lower

def newname(name: str, separator: str, capitalization: Capitalization) -> str:
    pat = re.compile(r"[,.;:\-']")
    def f(fname: str) -> str:
        return separator.join((capitalization(p) for p in pat.split(replace_chars(fname)) if p))
    if os.path.isfile(name):
        (filename, ext) = os.path.splitext(name)
        cleanname = f(filename)
        return f'{cleanname}.{ext}'
    else:
        return f(name)

def replace_chars(name: str) -> str:
    return (name.lower()
            .replace("ä", "ae")
            .replace("ö", "oe")
            .replace("ü", "ue")
            .replace("ß", "ss")
            )

def parseargs() -> argparse.Namespace:
    p = argparse.ArgumentParser(
        prog="convert filenames",
        description="Converts filenames in given directory to hyphenated lowercase"
    )
    p.add_argument("-v", "--virtual", action="store_true", help="Dry run flag. Defaults to false.")
    p.add_argument("-t","--target", default=os.getcwd(), help="Target directory or file. Defaults to current working directory.")
    p.add_argument("-s", "--separator", default="-", type=str, help="Word separator. Default is dash.")
    p.add_argument("-c", "--capitalize", action="store_true", help="Capitalize the first letter of every word.")
    p.add_argument("-C", "--capitalizeall", action="store_true", help="Capitalize all letter of every word.")

    return p.parse_args()

if __name__ == "__main__":
    args = parseargs()
    main(args.target, args.virtual, args.separator, args.capitalize, args.capitalizeall)
